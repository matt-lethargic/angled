name: build-deploy

on:
  push:
    branches: [master]
  
  workflow_dispatch:
    
jobs:
  terraform:
    name: 'Terraform'
    runs-on: 'ubuntu-latest'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_ACTIONS_WORKING_DIR: './terraform'

    defaults:
      run:
        working-directory: ${{ env.TF_ACTIONS_WORKING_DIR }}

    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out tfplan

      - name: Terraform Apply
        id: Apply
        run: terraform apply -no-color -auto-approve -input=false tfplan

  build-test:
    name: 'Build and Test'
    runs-on: 'ubuntu-latest'

    steps:
      - uses: actions/checkout@v1

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node 14
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: 'Build and Test'
        run: |
          npm ci
          npm run build:ci

      - name: Cache Dist
        uses: actions/cache@v2
        env:
          cache-name: cache-dist
        with:
          path: ~/dist
          key: build-dist-${{ github.run_id }}
          restore-keys: |
            build-dist-${{ github.run_id }}

  deploy:
    name: 'Deploy - Test'
    runs-on: 'ubuntu-latest'
    environment: test
    needs: [terraform, build-test]

    steps:
      - uses: Azure/login@v1.1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_AD_TENANT_ID }}"}'
      
      - name: Cache Dist
        uses: actions/cache@v2
        id: cache-dist
        env:
          cache-name: cache-dist
        with:
          path: ~/dist
          key: build-dist-${{ github.run_id }}
          restore-keys: |
            build-dist-${{ github.run_id }}

      - name: Check coverage tolerance
        if: ${{ steps.cache-dist.outputs.cache-hit == 'false' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Cache not found')

      - name : ls
        # working-directory : "."
        run : "ls -la "

      - name: Upload to blob storage
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
              az storage blob upload-batch --account-name angledsa --auth-mode key -d '$web' -s '~/dist' --pattern "*.*"

      # - name: Purge CDN endpoint
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: 2.0.72
      #     inlineScript: |
      #       az network front-door purge-endpoint --content-paths  "/*" --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"

      - name: logout
        run: |
              az logout
        if: always()